basePath: /v1
definitions:
  main.CommentPayload:
    properties:
      content:
        maxLength: 100
        type: string
      user_id:
        maxLength: 100
        type: string
    required:
    - content
    - user_id
    type: object
  main.CreatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      title:
        maxLength: 100
        type: string
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      token:
        type: string
      username:
        type: string
    type: object
  store.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for a social media app, simulating real-world scenarios used by
    social media apps.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SocialMedia API
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /health/:
    get:
      consumes:
      - application/json
      description: Checks the health of the server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Checks the health of the server
      tags:
      - health
  /posts/:
    post:
      consumes:
      - application/json
      description: Creates a post.
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreatePostPayload'
      produces:
      - application/json
      responses:
        "204":
          description: Post created successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a post
      tags:
      - posts
  /posts/{postID}/:
    delete:
      consumes:
      - application/json
      description: Deletes a post by ID.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Post deleted
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Post not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieves a post by ID.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Post retrieved successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Post not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Retrieves a post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Updates a post by ID.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "204":
          description: Post updated successfully
          schema:
            type: string
        "400":
          description: Post not found
          schema: {}
        "404":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a post
      tags:
      - posts
  /posts/comments/:
    post:
      consumes:
      - application/json
      description: Creates a comment on a user's post
      parameters:
      - description: Comment payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CommentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Comment created successfully!
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a comment on a user's post
      tags:
      - comments
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.User'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Follows a user by ID.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Follower ID
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/store.User'
      produces:
      - application/json
      responses:
        "204":
          description: User followed
          schema:
            type: string
        "400":
          description: User payload missing
          schema: {}
        "404":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follows a user
      tags:
      - users
  /users/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollows a user by ID.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Follower ID
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/store.User'
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed
          schema:
            type: string
        "400":
          description: User payload missing
          schema: {}
        "404":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollows a user
      tags:
      - users
  /users/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activates/Registers a user profile by invitation token.
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates/Registers a user profile
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Retrieves the user's feed, using pagination and filtering, with
        a maximum of 20 posts per request.
      parameters:
      - description: Length of the response
        in: path
        name: limit
        type: integer
      - description: Offset of the response
        in: path
        name: offset
        type: integer
      - description: Method of sorting the posts
        in: path
        name: sort
        type: string
      - collectionFormat: csv
        description: The tags which the posts must contain
        in: path
        items:
          type: string
        name: tags
        type: array
      - description: Keyword that must appear in the posts
        in: path
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Feed retrieved successfully!
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Gets the user's feed.
      tags:
      - feed
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
